<template>
	<view>
		<view class="setting-view">
			<view @click="changeRole" style="margin-right: 40rpx;">
				<uniIcons type="staff-filled" size="20" color="#FFFFFF"></uniIcons>
			</view>
			
			<view @click="messageClick">
				<uniIcons type="chat-filled" size="20" color="#FFFFFF"></uniIcons>
			</view>
		</view>
		
		<view class="uni-row" style="margin-top: 20rpx;justify-content:flex-end;">
			<view class="video-container-view">
				<RCRTCView class="video-view" ref="videoView" :fitType="currentFitType" :mirror="mirror">
				</RCRTCView>
				<view class="video-top-view">
					<button class="fitButton" plain="true" @click="fitTypeButtonClick">
						<text class="whiteColor">{{fitTypeTitles[currentFitTypeIndex]}}</text>
					</button>
				</view>
			</view>
			
			<view class="rightControlArea">
				<text class="streamTitle">合流</text>
				<view class="media-type-view">
					<radio-group class="uni-inline-item">
						<label class="uni-inline-item" style="margin-left: 10rpx;" v-for="(item, index) in mediaTypes"
							:key="item.value" @click="changeMediaType(item)">
							<radio :value="item.value" :checked="item.value === currentMediaType && item.publish"
								:disabled="true" />
							<text class="text" :class="{disableText: !item.publish}">{{item.label}}</text>
						</label>
					</radio-group>
				</view>
				
				<view class="uni-row">
					<view class="tiny-view" v-if="displayTinyButton">
						<label class="uni-inline-item radio" @click="tinyClick">
							<radio :checked="tiny" :disabled="true" />
							<text class="text">订阅小流</text>
						</label>
					</view>
					
					<view class="subscribe-view">
						<button class="subscribe-button" @click="subscribeClick" type="primary">
							<text :class="{disableText: !canSubscribe}" style="color: #FFFFFF;">{{subscribe ? '取消订阅' : '订阅'}}</text>
						</button>
					</view>
				</view>
				
				<view class="mute-view">
					<label class="uni-inline-item radio" @click="muteVideoClick">
						<radio :checked="muteVideo" :disabled="true"/>
						<text class="text">静音视频</text>
					</label>
					<label class="uni-inline-item radio" @click="muteAudioClick">
						<radio :checked="muteAudio" :disabled="true"/>
						<text class="text">静音音频</text>
					</label>
				</view>
				
				<view class="voice-view">
					<button @click="speakerClick" style="margin-top: 10rpx; width: 180rpx; height: 50rpx;" type="primary">
						<text class="text" style="color: #FFFFFF;">{{speaker ? '扬声器播放中' : '听筒播放中'}}</text>
					</button>
				</view>
				
				
			</view>
			
		</view>
		
		<stats-view :networkStats="networkStats" :localAudioStats="audioStats" :localVideoStats="videoStats"
			:localTinyVideoStats="tinyVideoStats">
		</stats-view>
		<fuiDropdownList :options="fitTypeTitles" ref="fitTypeList" :isCheckbox="false" @click="fitTypeItemClick">
		</fuiDropdownList>
		
		<view class="uni-row" style="margin-top: 80rpx;justify-content:flex-end;">
			<view class="video-container-view">
				<RCRTCView class="video-view" ref="cdnView" :fitType="currentFitType" :mirror="mirror">
				</RCRTCView>
				<view class="video-top-view">
					<button class="fitButton" plain="true" @click="fitTypeButtonClick">
						<text class="whiteColor">{{fitTypeTitles[currentFitTypeIndex]}}</text>
					</button>
				</view>
			</view>
			
			<view class="rightControlArea">
				<text class="streamTitle">融云 CDN 流</text>
				
				<view class="subscribe-view">
					<button style="width: 260rpx;" @click="subscribeCDNClick" type="primary">
						<text style="color: #FFFFFF;">{{subscribeCDN ? '取消订阅' : '订阅内置CDN'}}</text>
					</button>
				</view>
				
				<view class="uni-row">
					<button @click="showFpsList" class="dropdownButton">
						<text class="text">{{fpsTitles[currentFps]}}</text>
					</button>
					<button @click="showResolutionList(false)" class="dropdownButton">
						<text class="text">{{resolutionTitles[currentResolution]}}</text>
					</button>
				</view>
				
			</view>
			
		</view>
		
		<fuiDropdownList :options="fpsTitles" ref="fpsList" :isCheckbox="false" @click="fpsItemClick"></fuiDropdownList>
		<fuiDropdownList :options="resolutionTitles" ref="resolutionList" :height="600" :isCheckbox="false"
			@click="resolutionItemClick"></fuiDropdownList>
	</view>
</template>

<script>
	import uniIcons from "@/components/uni-icons/uni-icons.vue"
	import * as Constants from '../../common/constants';
	import {
		RCRTCCamera,
		RCRTCViewFitType,
		RCRTCMediaType,
		RCRTCVideoFps,
		RCRTCVideoResolution,
		RCRTCEngineEventsName,
		RCRTCStatsEventsName,
	} from '@/uni_modules/RongCloud-RTCWrapper/lib/RCRTCDefines';
	import RCRTCView from '@/uni_modules/RongCloud-RTCWrapper/components/RCRTCView';
	import RCRTCEngine from '@/uni_modules/RongCloud-RTCWrapper/lib/RCRTCEngine';
	import fuiDropdownList from "@/components/fui-dropdown-list/fui-dropdown-list";
	import statsView from "@/components/statsView";

	export default {
		components: {
			uniIcons,
			RCRTCView,
			fuiDropdownList,
			statsView
		},
		data() {
			return {
				rtcEngine: null,
				isSwitchLiveRole: false,
				mirror: false,
				mediaTypes: [],
				currentMediaType: -1,
				tiny: false,
				currentFitTypeIndex: 0,
				fitTypes: Constants.fitTypes,
				fitTypeTitles: [],
				muteVideo: false,
				muteAudio: false,
				speaker: false,
				isPublishVideo: false,
				isPublishAudio: false,
				subscribe: false,
				subscribeCDN: false,
				videoStatsRes: null,
				audioStats: null,
				fpsTitles: [],
				resolutionTitles: [],
				currentFps: RCRTCVideoFps.Fps15,
				currentResolution: RCRTCVideoResolution.Resolution_480x640,
				tempRoomSetup: null,
				localUserId: '',
				enableTinyStream: '',
				usersInfo: [],
			}
		},
		computed: {
			currentFitType: function() {
				return this.fitTypes[this.currentFitTypeIndex].value;
			},
			videoStats: function() {
				return this.tiny ? null : this.videoStatsRes;
			},
			tinyVideoStats: function() {
				return this.tiny ? this.videoStatsRes : null;
			},
			canSubscribe: function() {
				return this.mediaTypes.some(item => item.publish === true);
			},
			displayTinyButton: function() {
				return this.currentMediaType === RCRTCMediaType.Video || this.currentMediaType === RCRTCMediaType
					.AudioVideo;
			},
		},
		onLoad(option) {
			this.tempRoomSetup = option.roomSetup;
			this.localUserId = option.userId;
			this.enableTinyStream = option.enableTinyStream;
			this.isSwitchLiveRole = option.isSwitchLiveRole;
			this.rtcEngine = getApp().globalData.rtcEngine;
			this.roomId = option.roomId;
			this.fitTypeTitles = this.fitTypes.map(item => item.label);
			this.mediaTypes = Constants.mediaTypes.map(({ value, label }) => {
				return {
					value,
					label,
					publish: false
				};
			});

			uni.setNavigationBarTitle({
				title: `观众模式:${this.roomId}`
			});

			this.addListeners();
			// 加入房间
			if (!this.isSwitchLiveRole) {
				this.joinRoom(option.roomId, JSON.parse(option.roomSetup));
			}
			
			this.fpsTitles = Object.keys(RCRTCVideoFps).filter((item) => {
				return isNaN(Number(item));
			}).map((item, index) => {
				let temp = item.replace('Fps', '');
				return temp + ' FPS';
			});
			
			this.resolutionTitles = Object.keys(RCRTCVideoResolution).filter((item) => {
				return isNaN(Number(item));
			}).map((item, index) => {
				let temp = item.replace('Resolution_', '');
				return temp;
			});
			
			this.usersInfo = getApp().globalData.roomUsers
			for(let i=0;i<this.usersInfo.length;i++) {
				if(this.usersInfo[i].isPublishVideo && this.usersInfo[i].isPublishAudio){
					this.changeRemotePublishStatus(2, true);
				}
				if(this.usersInfo[i].isPublishVideo) {
					this.changeRemotePublishStatus(1, true);
				}else if(this.usersInfo[i].isPublishAudio){
					this.changeRemotePublishStatus(0, true);
				}
			}
			console.log('this.usersInfo---',this.usersInfo)
		},
		onUnload() {
			this.removeListeners();
		},
		onBackPress() {
			this.rtcEngine.leaveRoom();
		},
		onNavigationBarButtonTap(e) {
			console.log(e);
			if (e.text === '💬') {
				// 聊天室
				uni.navigateTo({
					url: `../messagePanel?host=${false}&roomId=${this.roomId}`
				});
			}
		},
		methods: {
			addListeners() {
				console.log('audience-addListeners')
				// 本地用户加入房间的回调
				uni.$on(RCRTCEngineEventsName.OnRoomJoined, this.onRoomJoinedCallback.bind(this));
				// 本地用户离开房间的回调
				uni.$on(RCRTCEngineEventsName.OnRoomLeft, this.onRoomLeftCallback.bind(this));

				uni.$on(RCRTCEngineEventsName.OnRemoteLiveMixPublished, ({ type }) => {
					this.changeRemotePublishStatus(type, true);
				});

				uni.$on(RCRTCEngineEventsName.OnRemoteLiveMixUnpublished, ({ type }) => {
					console.log('OnRemoteLiveMixUnpublished---',type)
					this.changeRemotePublishStatus(type, false);
				});

				uni.$on(RCRTCEngineEventsName.OnLiveMixSubscribed, this.onLiveMixSubscribedCallback.bind(this));
				uni.$on(RCRTCEngineEventsName.OnLiveMixUnsubscribed, this.onLiveMixUnsubscribedCallback.bind(this));
				uni.$on(RCRTCStatsEventsName.OnLiveMixVideoStats, res => {
					this.videoStatsRes = res;
				});
				uni.$on(RCRTCStatsEventsName.OnLiveMixAudioStats, res => {
					this.audioStats = res;
				});
				
				uni.$on('IRCRTCIWListener:onLiveMixInnerCdnStreamSubscribed', this.onLiveMixInnerCdnStreamSubscribedCallback.bind(this));
				uni.$on('IRCRTCIWListener:onLiveMixInnerCdnStreamUnsubscribed', this.onLiveMixInnerCdnStreamUnsubscribedCallback.bind(this));
				uni.$on('IRCRTCIWListener:onLocalLiveMixInnerCdnVideoResolutionSet', this.onLocalLiveMixInnerCdnVideoResolutionSetCallback.bind(this));
				uni.$on('IRCRTCIWListener:onLocalLiveMixInnerCdnVideoFpsSet', this.onLocalLiveMixInnerCdnVideoFpsSetCallback.bind(this));
				uni.$on('IRCRTCIWListener:onLiveRoleSwitched', this.onLiveRoleSwitchedCallback.bind(this));
				uni.$on('IRCRTCIWListener:onRemoteLiveRoleSwitched', this.onRemoteLiveRoleSwitchedCallback.bind(this));
			},
			removeListeners() {
				uni.$off(RCRTCEngineEventsName.OnRoomJoined);
				// 本地用户离开房间的回调
				uni.$off(RCRTCEngineEventsName.OnRoomLeft);
				uni.$off(RCRTCEngineEventsName.OnLiveMixSubscribed);
				uni.$off(RCRTCEngineEventsName.OnLiveMixUnsubscribed);
				uni.$off(RCRTCEngineEventsName.OnRemoteLiveMixPublished);
				uni.$off(RCRTCEngineEventsName.OnRemoteLiveMixUnpublished);
				uni.$off(RCRTCStatsEventsName.OnLiveMixVideoStats);
				uni.$off(RCRTCStatsEventsName.OnLiveMixAudioStats);
				
				uni.$off('IRCRTCIWListener:onLiveMixInnerCdnStreamSubscribed');
				uni.$off('IRCRTCIWListener:onLiveMixInnerCdnStreamUnsubscribed');
				uni.$off('IRCRTCIWListener:onLocalLiveMixInnerCdnVideoResolutionSet');
				uni.$off('IRCRTCIWListener:onLocalLiveMixInnerCdnVideoFpsSet');
				// uni.$off("IRCRTCIWListener:onLiveRoleSwitched");
				uni.$off("IRCRTCIWListener:onRemoteLiveRoleSwitched");
			},
			joinRoom(roomId, roomSetup) {
				uni.showLoading({
					title: '加入房间中...'
				});
				console.log(roomSetup, roomId);
				// 这个返回值只代表 joinRoom 接口调用成功
				let code = this.rtcEngine.joinRoom(roomId, roomSetup);
				console.log('joinRoom-code---',code)
			},

			intialConfig() {
				// 初始化配置
				this.rtcEngine.enableSpeaker(this.speaker);
			},

			changeRemotePublishStatus(type, enable) {
				if (!enable) {
					this.subscribe = false;
				}
				if (type === RCRTCMediaType.AudioVideo) {
					// 音视频模式，高亮 音频 和 视频
					this.mediaTypes.forEach(item => {
						item.publish = enable;
					});
					this.currentMediaType = RCRTCMediaType.AudioVideo;
				} else {
					this.currentMediaType = RCRTCMediaType.Audio;
				}
				let findIndex = this.mediaTypes.findIndex(item => item.value === type);
				let mediaTypeItem = this.mediaTypes[findIndex];
				mediaTypeItem.publish = enable;
				this.mediaTypes.splice(findIndex, 1, mediaTypeItem);
			},

			setLiveMixView() {
				this.rtcEngine.setLiveMixView(this.$refs.videoView.getNativeViewRef(), code => {
					if (code === 0) {
						console.log('设置合流视频成功');
					} else {
						uni.showToast({
							icon: 'none',
							title: `设置合流视频失败：${code}`,
							duration: 2000,
						});
					}
				});
			},

			removeLiveMixView() {
				this.rtcEngine.removeLiveMixView(code => {
					if (code === 0) {
						console.log('移除合流视频成功');
					} else {
						uni.showToast({
							icon: 'none',
							title: `移除合流视频失败：${code}`,
							duration: 2000,
						});
					}
				});
			},

			/* 点击事件 */

			tinyClick() {
				if (this.subscribe) {
					return;
				}
				this.tiny = !this.tiny;
			},
			changeMediaType(item) {
				if (this.subscribe || !item.publish) {
					return;
				}
				this.currentMediaType = item.value;
			},
			subscribeClick() {
				if (this.currentMediaType === -1) {
					return;
				}
				if (!this.subscribe) {
					let code = this.rtcEngine.subscribeLiveMix(this.currentMediaType, this.tiny);
					if (code === 0) {
						uni.showLoading({
							title: '加载中...'
						});
					} else {
						uni.showToast({
							icon: 'none',
							title: `订阅失败：${code}`,
							duration: 2000,
						});
					}
				} else {
					let code = this.rtcEngine.unsubscribeLiveMix(this.currentMediaType);
					if (code === 0) {
						uni.showLoading({
							title: '加载中...'
						});
					} else {
						uni.showToast({
							icon: 'none',
							title: `取消订阅失败：${code}`,
							duration: 2000,
						});
					}
				}
			},
			fitTypeItemClick(e) {
				this.currentFitTypeIndex = e.index;
			},
			fitTypeButtonClick() {
				console.log(this.$refs)
				this.$refs.fitTypeList.show();
			},
			speakerClick() {
				this.speaker = !this.speaker;
				this.rtcEngine.enableSpeaker(this.speaker);
			},
			muteVideoClick() {
				this.muteLiveMixStream(RCRTCMediaType.Video, !this.muteVideo);
			},
			muteAudioClick() {
				this.muteLiveMixStream(RCRTCMediaType.Audio, !this.muteAudio);
			},
			muteLiveMixStream(type, mute) {
				let code = this.rtcEngine.muteLiveMixStream(type, mute);
				if (code === 0) {
					switch (type) {
						case RCRTCMediaType.Video:
							this.muteVideo = mute;
							break;
						case RCRTCMediaType.Audio:
							this.muteAudio = mute;
							break;
					}
				} else {
					let str = mute ? '' : '取消';
					uni.showToast({
						icon: 'none',
						title: `${str}静音失败：${code}`
					})
				}
			},
			/* callbacks */
			onRoomJoinedCallback(res) {
				console.log('host OnRoomJoined ', res);
				let { code, message } = res;
				uni.hideLoading();
				if (code != 0) {
					uni.showToast({
						icon: 'none',
						title: `Join Room Error: msg: ${message},code: ${code}`,
						duration: 2000,
						complete: () => {
							// 返回上一个页面
							setTimeout(() => {
								uni.navigateBack();
							}, 2000);
						}
					});
					return;
				}
				// 初始化配置
				this.intialConfig();
			},
			onRoomLeftCallback({ code, message }) {
				let str = code === 0 ? '成功' : `失败: ${code}-${message}`;
				uni.showToast({
					icon: 'none',
					title: `退出房间${str}`
				});
			},
			onLiveMixSubscribedCallback(res) {
				uni.hideLoading();
				let { type, code, message } = res;
				if (code === 0) {
					this.subscribe = true;
					if (type === RCRTCMediaType.Video || type === RCRTCMediaType.AudioVideo) {
						this.setLiveMixView();
					}
				} else {
					uni.showToast({
						icon: 'none',
						title: `订阅合流失败：${code}-${message}`
					});
				}
			},
			onLiveMixUnsubscribedCallback(res) {
				uni.hideLoading();
				let { type, code, message } = res;
				if (code === 0) {
					this.subscribe = false;
					this.muteAudio = false;
					this.muteVideo = false;
					if (type === RCRTCMediaType.Video || type === RCRTCMediaType.AudioVideo) {
						this.removeLiveMixView();
					}
				} else {
					uni.showToast({
						icon: 'none',
						title: `取消订阅合流失败：${code}-${message}`
					});
				}
			},
			onLiveMixInnerCdnStreamSubscribedCallback(res) {
				// 订阅直播内置 cdn 资源回调
				console.log('onLiveMixInnerCdnStreamSubscribedCallback---')
				if (res.code != 0) {
					uni.showToast({
						title: 'error:'+res.code,
						icon: 'error'
					});
					return
				}

			},
			onLiveMixInnerCdnStreamUnsubscribedCallback(res) {
				// 取消订阅直播内置 cdn 资源回调
				console.log('onLiveMixInnerCdnStreamUnsubscribedCallback---')
				if (res.code == 0) {
				    // 取消订阅成功
					this.subscribeCDN = false;
					console.log('取消订阅成功');
				} else {
				  // 取消订阅失败
				  this.subscribeCDN = true;
				  console.log('取消订阅失败code---' + res.code);
				}
			},
			onLocalLiveMixInnerCdnVideoResolutionSetCallback(res) {
				// 观众端设置订阅 cdn 流的分辨率的回调
				console.log('分辨率的回调',res)
			},
			onLocalLiveMixInnerCdnVideoFpsSetCallback(res) {
				//观众端 设置订阅 cdn 流的帧率的回调
				console.log('帧率的回调',res)
			},
			onLiveRoleSwitchedCallback(res){
				console.log('onLiveRoleSwitchedCallback---',res)
				uni.$off("IRCRTCIWListener:onLiveRoleSwitched");
				let roomSetup = {
					type: JSON.parse(this.tempRoomSetup).type,
					role: 1,
				};
				uni.redirectTo({url:`../host/host?isSwitchLiveRole=true&roomId=${this.roomId}&roomSetup=${JSON.stringify(roomSetup)}&userId=${this.localUserId}&enableTinyStream=${this.enableTinyStream}`})
			},
			onRemoteLiveRoleSwitchedCallback(res){
				console.log('onRemoteLiveRoleSwitchedCallback---',res)
			},
			
			subscribeCDNClick(){
				if(this.subscribeCDN){
					console.log('unsubscribeLiveMixInnerCdnStream()')
					this.rtcEngine.unsubscribeLiveMixInnerCdnStream()
				}else{
					let subscribeCode = this.rtcEngine.subscribeLiveMixInnerCdnStream()
					if (subscribeCode != 0) {
						uni.showToast({
							title: 'error:'+subscribeCode,
							icon: 'error'
						});
						return
					}
					
					this.rtcEngine.setLiveMixInnerCdnStreamView(this.$refs.cdnView.getNativeViewRef(), (code) => {
					  if (code === 0) {
					      // 设置成功
						  this.subscribeCDN = true;
						  console.log('设置预览窗口成功');
					  } else {
					    // 设置失败
						this.subscribeCDN = false;
						console.log('设置预览窗口失败code---' + code);
					  }
					});
				}
			},
			fpsItemClick(e) {
				if(!this.subscribeCDN) {
					uni.showToast({
						title: '请先订阅',
						icon: 'error'
					})
					return
				}
				this.currentFps = e.index;
				this.rtcEngine.setLocalLiveMixInnerCdnVideoFps(this.currentFps)
			},
			showFpsList() {
				this.$refs.fpsList.show();
			},
			resolutionItemClick(e) {
				if(!this.subscribeCDN) {
					uni.showToast({
						title: '请先订阅',
						icon: 'error'
					})
					return
				}
				this.currentResolution = e.index;
				console.log("this.currentResolution",e)
				let size = e.text.split('x');
				let width = parseInt(size[0]);
				let height = parseInt(size[1]);
				console.log("currentResolution",width,height)
				this.rtcEngine.setLocalLiveMixInnerCdnVideoResolution(width,height)
			},
			showResolutionList() {
				this.$refs.resolutionList.show();
			},
			messageClick(){
				uni.navigateTo({
					url: `../messagePanel?host=${false}&roomId=${this.roomId}`
				});
			},
			changeRole(){
				console.log('changeRole---')
				let code = this.rtcEngine.switchLiveRole(1)
				if (code!=0) {
					uni.showToast({
						title: 'code：' + code,
						icon: 'error'
					})
				}
			}
		}
	}
</script>

<style scoped>
	.media-type-view {
		margin-top: 20rpx;
	}

	.text {
		font-size: 27rpx;
	}

	.disableText {
		color: #ACA899;
	}

	.whiteColor {
		color: #FFFFFF
	}

	.tiny-view {
		margin-top: 20rpx;
		align-items: center;
		flex: 1;
	}

	.subscribe-view {
		margin-top: 20rpx;
		align-items: center;
		flex: 1;
	}

	.subscribe-button {
		width: 180rpx;
	}

	.video-container-view {
		margin-top: 20rpx;
		background-color: #007AFF;
		flex: 1;
	}

	.video-view {
		height: 400rpx;
	}

	.video-top-view {
		position: absolute;
		left: 10rpx;
		top: 10rpx;
		align-items: flex-start;
	}

	.mute-view {
		flex-direction: row;
		justify-content: space-around;
		margin-top: 20rpx;
	}

	.voice-view {
		align-items: center;
		margin-top: 20rpx;
	}
	
	.rightControlArea {
		flex: 1.2;
	}
	
	.streamTitle {
		margin-top: 10px;
		text-align: center;
		color: #007AFF;
		margin-bottom: 10px;
	}
	
	.dropdownButton {
		width: 140rpx;
		height: 60rpx;
		margin-left: 30rpx;
	}
	
	.setting-view {
		flex-direction: row;
		justify-content: flex-end;
		padding-right: 30rpx;
		background-color: #007AFF;
		height: 60rpx;
		left: 0;
		right: 0;
	}
</style>
