<template>
	<view>
		<view class="setting-view">
			<button class="setting-button" :class="{ 'setting-button-disable': !enableCamera }" @click="fuBeautyClick">
				<text>相</text>
			</button>
			<button class="setting-button" :class="{ 'setting-button-disable': !enableCamera }" @click="mhBeautyClick">
				<text>MH</text>
			</button>
			<button class="setting-button" :class="{ 'setting-button-disable': !enableCamera }" @click="beautyClick">
				<image style="width: 16px; height: 16px;" src="@/static/img/beauty.png"></image>
			</button>
			<button class="setting-button" :class="{ 'setting-button-disable': !publishAudio }"
				@click="audioEffectClick">
				<image style="width: 16px; height: 16px;" src="@/static/img/music.png"></image>
			</button>
			<button class="setting-button" :class="{ 'setting-button-disable': !publishAudio }" @click="audioMixClick">
				<image style="width: 16px; height: 16px;" src="@/static/img/audio_mix.png"></image>
			</button>
		</view>
		<view class="uni-row" style="margin-top: 90rpx;">
			<view style="flex: 1; background-color: #007AFF;">
				<RCRTCView class="localVideoView" ref="localVideoView" :fitType="currentFitType" :mirror="mirror">
				</RCRTCView>
				<view class="videoTopView">
					<text class="text whiteColor">{{localUserId}}</text>
					<button class="fitButton" plain="true" @click="showFitTypeList">
						<text class="text whiteColor">{{fitTypeTitles[currentFitTypeIndex]}}</text>
					</button>
				</view>
			</view>
			<view class="rightControlArea">
				<view class="uni-row">
					<label @click="changeAudio" class="radio">
						<radio :checked="enableAudio" :disabled="true" />
						<text class="text">采集音频</text>
					</label>
					<label @click="changeCamera" class="radio" style="margin-left: 10rpx;">
						<radio :checked="enableCamera" :disabled="true" />
						<text class="text">采集视频</text>
					</label>
				</view>
				<view class="uni-row" style="margin-top: 10rpx;">
					<label @click="changePublishAudio" class="radio">
						<radio :checked="publishAudio" :disabled="true" />
						<text class="text">发布音频</text>
					</label>
					<label @click="changePublishVideo" class="radio" style="margin-left: 10rpx;">
						<radio :checked="publishVideo" :disabled="true" />
						<text class="text">发布视频</text>
					</label>
				</view>
				<view class="uni-row" style="margin-top: 10rpx;">
					<label @click="changeFrontCamera" class="radio">
						<radio :checked="frontCamera" />
						<text class="text">前置摄像</text>
					</label>
					<label @click="changeMirror" class="radio" style="margin-left: 10rpx;">
						<radio :checked="mirror" />
						<text class="text">本地镜像</text>
					</label>
				</view>
				<button @click="changeSpeaker" style="margin-top: 10rpx; width: 140rpx; height: 50rpx;">
					<text class="text">{{speaker ? '扬声器' : '听筒'}}</text>
				</button>
				<view class="uni-row">
					<button @click="showFpsList" class="dropdownButton" style="margin-top: 10rpx;">
						<text class="text">{{fpsTitles[currentFps]}}</text>
					</button>
					<button @click="showResolutionList(false)" class="dropdownButton"
						style="margin-top: 10rpx; margin-left: 30rpx;">
						<text class="text">{{resolutionTitles[currentResolution]}}</text>
					</button>
				</view>
				<view class="uni-inline-item" style="margin-top: 10rpx;">
					<text class="text">码率下限：</text>
					<button @click="showMinVideoKbpsList" class="dropdownButton">
						<text class="text">{{minVideoKbpsTitles[currentMinVideoKbpsIndex]}}</text>
					</button>
				</view>
				<view class="uni-inline-item" style="margin-top: 10rpx;">
					<text class="text">码率上限：</text>
					<button @click="showMaxVideoKbpsList" class="dropdownButton">
						<text class="text">{{maxVideoKbpsTitles[currentMaxVideoKbpsIndex]}}</text>
					</button>
				</view>
			</view>
		</view>
		<view class="uni-inline-item tinySetup" v-if="enableTinyStream">
			<text class="text">小流设置</text>
			<view style="align-items: center;">
				<button @click="showResolutionList(true)">
					<text class="text">{{resolutionTitles[currentTinyResolution]}}</text>
				</button>
				<view class="uni-inline-item">
					<view class="uni-inline-item" style="margin-top: 10rpx;">
						<text class="text">码率下限：</text>
						<button @click="showTinyMinVideoKbpsList" class="dropdownButton">
							<text class="text">{{tinyMinVideoKbpsTitles[currentTinyMinVideoKbpsIndex]}}</text>
						</button>
					</view>
					<view class="uni-inline-item" style="margin-top: 10rpx; margin-left: 10rpx;">
						<text class="text">码率上限：</text>
						<button @click="showTinyMaxVideoKbpsList" class="dropdownButton">
							<text class="text">{{tinyMaxVideoKbpsTitles[currentTinyMaxVideoKbpsIndex]}}</text>
						</button>
					</view>
				</view>
			</view>
		</view>
		<stats-view :networkStats="networkStats" :localAudioStats="localAudioStats" :localVideoStats="localVideoStats"
			:localTinyVideoStats="localTinyVideoStats"></stats-view>
		<view v-for="user in remotePublishers" :key="user.userId">
			<remote-anchor-view :key="user.userId" :ref="user.userId" v-bind="user"></remote-anchor-view>
		</view>
		<fuiDropdownList :options="resolutionTitles" ref="resolutionList" :height="600" :isCheckbox="false"
			@click="resolutionItemClick">
		</fuiDropdownList>
		<fuiDropdownList :options="fpsTitles" ref="fpsList" :isCheckbox="false" @click="fpsItemClick">
		</fuiDropdownList>
		<fuiDropdownList :options="maxVideoKbpsTitles" ref="maxVideoKbpsList" :height="600" :isCheckbox="false"
			@click="maxVideoKbpsItemClick">
		</fuiDropdownList>
		<fuiDropdownList :options="minVideoKbpsTitles" ref="minVideoKbpsList" :height="600" :isCheckbox="false"
			@click="minVideoKbpsItemClick">
		</fuiDropdownList>
		<fuiDropdownList :options="tinyMaxVideoKbpsTitles" ref="tinyMaxVideoKbpsList" :isCheckbox="false"
			@click="tinyMaxVideoKbpsItemClick">
		</fuiDropdownList>
		<fuiDropdownList :options="tinyMinVideoKbpsTitles" ref="tinyMinVideoKbpsList" :isCheckbox="false"
			@click="tinyMinVideoKbpsItemClick">
		</fuiDropdownList>
		<fuiDropdownList :options="fitTypeTitles" ref="fitTypeList" :isCheckbox="false" @click="fitTypeItemClick">
		</fuiDropdownList>
		<fuiDropdownList :options="menus" ref="menus" :isCheckbox="false" @click="menusItemClick"></fuiDropdownList>
		<view class="beauty" v-if="showMHBeauty" :style="{width:windowWidth+'px'}" @click.stop="">
			<view class="beauty-btn">
				<view class="change-btn">
					<text class="ch-tit">美颜</text><text class="switch-btn"
						@click="switchChange">{{mhBeautyEnable?'开启':'关闭'}}</text>
				</view>
				<view class="close-btn">
					<text class="close-tit" @click="showMHBeauty=false">X</text>
				</view>
			</view>
			<view class="beauty-view">
				<view v-if="curIndex === '0'" class="beauty-tab filte-view">
					<view class="tab-item" v-for="(item) in beautyFilterArr" :key="item.id" @click="switchBeautyFilter(item.id)"
						:class="{current: item.id === currentBeautyFilter}">
						<text>{{item.name}}</text>
					</view>
				</view>
				<!-- 美白 -->
				<view v-if="curIndex === '1'" class="white-view com-view">
					<slider :value="whiteVal" min="0" max="9" @change="whiteChange" show-value />
				</view>
				<!-- 红润 -->
				<view v-if="curIndex === '2'" class="ruddy-view com-view">
					<slider :value="ruddyVal" min="0" max="9" @change="ruddyChange" show-value />
				</view>
				<!-- 磨皮 -->
				<view v-if="curIndex === '3'" class="buffing-view com-view">
					<slider :value="buffingVal" min="0" max="9" @change="buffingChange" show-value />
				</view>
				<!-- 亮度 -->
				<view v-if="curIndex === '4'" class="brightness-view com-view">
					<slider :value="brightnessVal" min="0" max="9" @change="brightnessChange" show-value />
				</view>
			</view>
			<view class="beauty-tab">
				<view class="tab-item" v-for="(item) in beautyOptions" :key="item.id" @click="curIndex = item.id"
					:class="{current: item.id === curIndex}">
					<text>{{item.text}}</text>
				</view>
			</view>
		</view>
		<fu-beauty-panel v-if="isShowFUBeauty" @close="fuBeautyClick"></fu-beauty-panel>
	</view>
</template>

<script>
	import RCRTCEngine from '@/uni_modules/RongCloud-RTCWrapper/lib/RCRTCEngine';
	import RCRTCView from '@/uni_modules/RongCloud-RTCWrapper/components/RCRTCView';
	import {
		RCRTCCamera,
		RCRTCViewFitType,
		RCRTCMediaType,
		RCRTCVideoFps,
		RCRTCVideoResolution,
		RCRTCEngineEventsName,
		RCRTCStatsEventsName,
		RCRTCCameraCaptureOrientation,
	} from '@/uni_modules/RongCloud-RTCWrapper/lib/RCRTCDefines';

	import fuiDropdownList from "@/components/fui-dropdown-list/fui-dropdown-list";
	import statsView from "@/components/statsView";
	import remoteAnchorView from "@/components/remoteAnchorView";
	import * as Constants from '../../common/constants.js';
	import * as Config from '../../common/config.js';
	import permision from "@/js_sdk/wa-permission/permission.js";
	// 美狐基础版美颜
	import RCBeautyEngine from "@/uni_modules/RongCloud-BeautyWrapper/lib/RCBeautyEngine"
	// 美颜的原生插件（用户可以根据自己的需求实现）
	const RCUniFaceBeautifier = uni.requireNativePlugin('RongCloud-Example-RCUniFaceBeautifier');

	import RCFUBeautyEngine from '@/uni_modules/RongCloud-FUBeautyWrapper/lib/RCFUBeautyEngine';

	const Platform = uni.getSystemInfoSync().platform;

	export default {
		components: {
			RCRTCView,
			fuiDropdownList,
			statsView,
			remoteAnchorView,
		},
		data() {
			return {
				rtcEngine: null,
				localUserId: '',
				roomId: '',
				roomSetup: {},
				enableTinyStream: false,

				joinRoomSuccess: false,
				enableCamera: false,
				enableAudio: false,
				publishAudio: false,
				publishVideo: false,
				frontCamera: true,
				mirror: true,
				speaker: false,
				isShowTiny: false,
				isOpenBeauty: false,
				showMHBeauty: false,
				isShowFUBeauty: false,
				
				fpsTitles: [],
				resolutionTitles: [],
				fitTypeTitles: [],
				maxVideoKbpsTitles: [],
				minVideoKbpsTitles: [],
				tinyMaxVideoKbpsTitles: [],
				tinyMinVideoKbpsTitles: [],

				maxVideoKbps: Constants.maxVideoKbps,
				minVideoKbps: Constants.minVideoKbps,
				tinyMaxVideoKbps: Constants.tinyMaxVideoKbps,
				tinyMinVideoKbps: Constants.tinyMinVideoKbps,
				fitTypes: Constants.fitTypes,

				currentResolution: RCRTCVideoResolution.Resolution_720x1280,
				currentTinyResolution: RCRTCVideoResolution.Resolution_180x320,
				currentFps: RCRTCVideoFps.Fps30,
				currentFitTypeIndex: 0,
				currentMaxVideoKbpsIndex: 1,
				currentMinVideoKbpsIndex: 1,
				currentTinyMaxVideoKbpsIndex: 1,
				currentTinyMinVideoKbpsIndex: 1,

				networkStats: null,
				localAudioStats: null,
				localVideoStats: null,
				localTinyVideoStats: null,

				remotePublishers: [],
				
				windowWidth: 0,
				beautyOptions: Constants.beautyOptions,
				beautyFilterArr: Constants.beautyFilters,
				curIndex: '0',
				currentBeautyFilter: 0,
				whiteVal: 0,
				ruddyVal: 0,
				buffingVal: 0,
				brightnessVal: 5,
			}
		},

		computed: {
			currentFitType: function() {
				return this.fitTypes[this.currentFitTypeIndex].value;
			},
		},
		
		onResize() {
			this.updateScreenOrientation();
		},

		onLoad(option) {
			this.rtcEngine = getApp().globalData.rtcEngine;
			uni.getSystemInfo({
				success: (res) => {
					this.windowWidth = res.windowWidth;
				}
			})
			
			this.localUserId = option.userId;
			this.roomId = option.roomId;
			this.roomSetup = option.roomSetup;
			// 是否开启小流
			this.enableTinyStream = option.enableTinyStream === 'true';
			// 初始化data
			this.inintialGlobalData();
			// 添加监听
			this.addListeners();
			uni.setNavigationBarTitle({
				title: `会议号:${this.roomId}`
			});

			this.fpsTitles = Object.keys(RCRTCVideoFps).filter((item) => {
				return isNaN(Number(item));
			}).map((item, index) => {
				let temp = item.replace('Fps', '');
				return temp + ' FPS';
			});

			this.resolutionTitles = Object.keys(RCRTCVideoResolution).filter((item) => {
				return isNaN(Number(item));
			}).map((item, index) => {
				let temp = item.replace('Resolution_', '');
				return temp;
			});
			this.maxVideoKbpsTitles = this.maxVideoKbps.map(item => item + 'kbps');
			this.minVideoKbpsTitles = this.minVideoKbps.map(item => item + 'kbps');
			this.tinyMaxVideoKbpsTitles = this.tinyMaxVideoKbps.map(item => item + 'kbps');
			this.tinyMinVideoKbpsTitles = this.tinyMinVideoKbps.map(item => item + 'kbps');
			this.fitTypeTitles = this.fitTypes.map(item => item.label);
			// 加入房间
			this.joinRoom(option.roomId, JSON.parse(option.roomSetup));
		},

		onUnload(options) {
			this.removeListeners();
		},

		onBackPress() {
			/* 注意
			 * 此方法在页面点击返回按钮时调用，调用时机比 onUnload 早。
			 * 可以在这里处理需要调用原生才能实现的功能，
			 * 因为在 onUnload 中会遇到无法调用原生功能的情况。
			 * */
			this.rtcEngine.leaveRoom();
			// 关闭相芯美颜、重置相芯美颜
			this.resetFUBeautyData();
		},

		methods: {
			inintialGlobalData() {
				getApp().globalData.mettingPageData = {
					// 用户列表 元素为 {userId, isPublishAudio, isPublishVideo}
					users: [{
						userId: this.localUserId
					}],
					// 当前的合流裁剪模式
					currentRenderMode: 0,
					// 当前的合流布局模式
					currentLayoutMode: 0,
					// 自定义合流布局列表 数组元素为 {id, x, y, width, height}
					customLayouts: [],
					// 合流视频设置参数
					liveMixVideoParams: null,
					liveMixTinyVideoParams: null,
				};
			},

			destoryGlobalData() {
				getApp().globalData.mettingPageData = null;
			},

			addListeners() {
				uni.$on(RCRTCEngineEventsName.OnError, this.onErrorCallback.bind(this));
				// 本地用户加入房间回调
				uni.$on(RCRTCEngineEventsName.OnRoomJoined, this.onRoomJoinedCallback.bind(this));
				// 本地用户离开房间回调
				uni.$on(RCRTCEngineEventsName.OnRoomLeft, this.onRoomLeftCallback.bind(this));
				// 被踢出房间回调
				uni.$on(RCRTCEngineEventsName.OnKicked, this.onKickedCallback.bind(this));
				// 本地用户开关相机回调
				uni.$on(RCRTCEngineEventsName.OnCameraEnabled, this.onEnableCameraCallback.bind(this));
				// 本地用户发布资源回调
				uni.$on(RCRTCEngineEventsName.OnPublished, this.onPublishedCallback.bind(this));
				// 本地用户取消发布资源回调
				uni.$on(RCRTCEngineEventsName.OnUnpublished, this.onUnpublishedCallback.bind(this));
				// 远端用户加入房间操作回调
				uni.$on(RCRTCEngineEventsName.OnUserJoined, this.onUserJoinedCallback.bind(this));
				// 远端用户离开房间操作回调
				uni.$on(RCRTCEngineEventsName.OnUserLeft, this.onUserLeftCallback.bind(this));
				// 远端用户发布资源操作回调
				uni.$on(RCRTCEngineEventsName.OnRemotePublished, this.onRemotePublishedCallback.bind(this));
				// 远端用户取消发布资源操作回调
				uni.$on(RCRTCEngineEventsName.OnRemoteUnpublished, this.onRemoteUnpublishedCallback.bind(this));
				uni.$on(RCRTCEngineEventsName.OnSubscribed, this.onSubscribedCallback.bind(this));
				uni.$on(RCRTCEngineEventsName.OnUnsubscribed, this.onUnsubscribedCallback.bind(this));
				// 状态回调监听 请注意，下面是状态监听的枚举值 RCRTCStatsEventsName
				uni.$on(RCRTCStatsEventsName.OnNetworkStats, this.onNetworkStatsCallback.bind(this));
				uni.$on(RCRTCStatsEventsName.OnLocalAudioStats, this.onLocalAudioStatsCallback.bind(this));
				uni.$on(RCRTCStatsEventsName.OnLocalVideoStats, this.onLocalVideoStatsCallback.bind(this));
				uni.$on(RCRTCStatsEventsName.OnRemoteVideoStats, this.onRemoteVideoStatsCallback.bind(this));
			},

			removeListeners() {
				uni.$off(RCRTCEngineEventsName.OnRoomJoined);
				uni.$off(RCRTCEngineEventsName.OnRoomLeft);
				uni.$off(RCRTCEngineEventsName.OnKicked);
				uni.$off(RCRTCEngineEventsName.OnCameraEnabled);
				uni.$off(RCRTCEngineEventsName.OnPublished);
				uni.$off(RCRTCEngineEventsName.OnUnpublished);
				uni.$off(RCRTCEngineEventsName.OnUserJoined);
				uni.$off(RCRTCEngineEventsName.OnUserLeft);
				uni.$off(RCRTCEngineEventsName.OnRemotePublished);
				uni.$off(RCRTCEngineEventsName.OnRemoteUnpublished);
				uni.$off(RCRTCEngineEventsName.OnSubscribed);
				uni.$off(RCRTCEngineEventsName.OnUnsubscribed);
				uni.$off(RCRTCStatsEventsName.OnNetworkStats);
				uni.$off(RCRTCStatsEventsName.OnLocalAudioStats);
				uni.$off(RCRTCStatsEventsName.OnLocalVideoStats);
				uni.$off(RCRTCStatsEventsName.OnRemoteVideoStats);
			},

			joinRoom(roomId, roomSetup) {
				uni.showLoading({
					title: '加入房间中...'
				});
				console.log(roomSetup, roomId);
				// 这个返回值只代表 joinRoom 接口调用成功
				let code = this.rtcEngine.joinRoom(roomId, roomSetup);
			},

			// 初始配置
			initialConfig() {
				this.rtcEngine.enableSpeaker(this.speaker);
				let videoConfig = {
					fps: this.currentFps,
					resolution: this.currentResolution,
					mirror: this.mirror,
					minBitrate: this.minVideoKbps[this.currentMinVideoKbpsIndex],
					maxBitrate: this.maxVideoKbps[this.currentMaxVideoKbpsIndex],
				};
				this.rtcEngine.setVideoConfig(videoConfig, false);
				if (this.enableTinyStream) {
					let tinyVideoConfig = {
						fps: this.currentFps,
						resolution: this.currentTinyResolution,
						mirror: this.mirror,
						minBitrate: this.tinyMinVideoKbps[this.currentTinyMinVideoKbpsIndex],
						maxBitrate: this.tinyMaxVideoKbps[this.currentTinyMaxVideoKbpsIndex],
					};
					this.rtcEngine.setVideoConfig(tinyVideoConfig, true);
				}
			},
			async changeAudio(event) {
				if (!this.enableAudio) {
					if (Platform === 'android') {
						let res = await this.requestAndroidPermission('android.permission.RECORD_AUDIO');
						if (res != 1) {
							return;
						}
					}
				}
				let code = this.rtcEngine.enableMicrophone(!this.enableAudio);
				let tempStr = (this.enableAudio ? '打开' : '关闭') + '麦克风';
				if (code === 0) {
					this.enableAudio = !this.enableAudio;
					console.log(tempStr, '成功');
				} else {
					console.log(tempStr + '失败：', code);
				}
			},
			async changeCamera(event) {
				if (!this.enableCamera) {
					if (Platform === 'android') {
						let res = await this.requestAndroidPermission('android.permission.CAMERA');
						if (res != 1) {
							return;
						}
					}
				}
				uni.showLoading({
					title: '加载中...'
				});
				this.rtcEngine.enableCamera(!this.enableCamera, this.frontCamera ? RCRTCCamera.Front : RCRTCCamera.Back);
				// RCFUBeautyEngine.setDisplayOrientation(7);
				RCFUBeautyEngine.setIsFrontCamera(this.frontCamera);
			},
			setupLocalView() {
				if (this.enableCamera) {
					this.rtcEngine.setLocalView(this.$refs.localVideoView.getNativeViewRef(), (code) => {
						console.log('setLocalView code: ', code);
						if (code === 0) {
							console.log('setLocalView success');
						}
					});
				} else {
					this.rtcEngine.removeLocalView((code) => {
						console.log('removeLocalView code: ', code);
						if (code === 0) {
							console.log('removeLocalView success');
						}
					});
				}
			},
			changeFrontCamera(event) {
				this.frontCamera = !this.frontCamera;
				let code = this.rtcEngine.switchCamera();
				// RCFUBeautyEngine.setDisplayOrientation(7);
				RCFUBeautyEngine.setIsFrontCamera(this.frontCamera);
				console.log('changeFrontCamera code = ', code);
			},
			changePublishAudio() {
				if (this.publishAudio) {
					this.rtcEngine.unpublish(RCRTCMediaType.Audio);
				} else {
					this.rtcEngine.publish(RCRTCMediaType.Audio);
				}
				uni.showLoading({
					title: '加载中...',
				});
			},
			changePublishVideo() {
				if (this.publishVideo) {
					this.rtcEngine.unpublish(RCRTCMediaType.Video);
				} else {
					this.rtcEngine.publish(RCRTCMediaType.Video);
				}
				uni.showLoading({
					title: '加载中...',
				});
			},
			changeMirror() {
				this.mirror = !this.mirror;
			},
			changeSpeaker() {
				this.speaker = !this.speaker;
				this.rtcEngine.enableSpeaker(this.speaker);
			},
			showFpsList() {
				this.$refs.fpsList.show();
			},
			fpsItemClick(e) {
				this.currentFps = e.index;
				this.setVideoConfig(false);
			},
			resolutionItemClick(e) {
				if (this.isShowTiny) {
					this.currentTinyResolution = e.index;
					this.setVideoConfig(true);
				} else {
					this.currentResolution = e.index;
					this.setVideoConfig(false);
				}
			},
			showResolutionList(isTiny) {
				this.isShowTiny = isTiny;
				this.$refs.resolutionList.show();
			},
			showMaxVideoKbpsList() {
				this.$refs.maxVideoKbpsList.show();
			},
			showMinVideoKbpsList() {
				this.$refs.minVideoKbpsList.show();
			},
			showTinyMaxVideoKbpsList() {
				this.$refs.tinyMaxVideoKbpsList.show();
			},
			showTinyMinVideoKbpsList() {
				this.$refs.tinyMinVideoKbpsList.show();
			},
			minVideoKbpsItemClick(e) {
				this.currentMinVideoKbpsIndex = e.index;
				this.setVideoConfig(false);
			},
			maxVideoKbpsItemClick(e) {
				this.currentMaxVideoKbpsIndex = e.index;
				this.setVideoConfig(false);
			},
			tinyMaxVideoKbpsItemClick(e) {
				this.currentTinyMaxVideoKbpsIndex = e.index;
				this.setVideoConfig(true);
			},
			tinyMinVideoKbpsItemClick(e) {
				this.currentTinyMinVideoKbpsIndex = e.index;
				this.setVideoConfig(true);
			},
			showFitTypeList() {
				this.$refs.fitTypeList.show();
			},
			fitTypeItemClick(e) {
				this.currentFitTypeIndex = e.index;
			},
			mhBeautyClick() {
				this.showMHBeauty = !this.showMHBeauty;
			},
			beautyClick() {
				if (!this.enableCamera) {
					uni.showToast({
						icon: 'none',
						title: '请先采集视频'
					})
					return;
				}
				if (!this.isOpenBeauty) {
					RCUniFaceBeautifier.openBeauty((code) => {
						if (code === 0) {
							this.isOpenBeauty = true;
							uni.showToast({
								title: '打开美颜成功',
							});
						}
					});
				} else {
					RCUniFaceBeautifier.closeBeauty((code) => {
						if (code === 0) {
							this.isOpenBeauty = false;
							uni.showToast({
								title: '关闭美颜成功',
							});
						}
					});
				}
			},
			fuBeautyClick(){
				let fuBeautyRegisterCode = getApp().globalData.fuBeautyRegisterCode;
				if (fuBeautyRegisterCode != 1) {
					let code = RCFUBeautyEngine.register(Config.g_auth_package);
					getApp().globalData.fuBeautyRegisterCode = code;
					// code === 1 注册成功
					uni.showToast({
						icon: 'none',
						title: '相芯注册' + (code === 1 ? '成功' : '失败'),
						duration: 2000
					});
					console.log('相芯注册状态码：', code);
				}
				this.isShowFUBeauty = !this.isShowFUBeauty;
			},
			audioEffectClick() {
				if (!this.publishAudio) {
					uni.showToast({
						icon: 'none',
						title: '需要先发布音频',
						duration: 2000
					});
					return;
				}
				uni.navigateTo({
					url: './audioEffect'
				})
			},
			audioMixClick() {
				if (!this.publishAudio) {
					uni.showToast({
						icon: 'none',
						title: '需要先发布音频',
						duration: 2000
					});
					return;
				}
				uni.navigateTo({
					url: './audioMix'
				})
			},
			changeLocalPulishState(type, enable) {
				switch (type) {
					case RCRTCMediaType.Video:
						this.publishVideo = enable;
						break;
					case RCRTCMediaType.Audio:
						this.publishAudio = enable;
						break;
					case RCRTCMediaType.AudioVideo:
						this.publishAudio = enable;
						this.publishVideo = enable;
						break;
				}
			},
			setVideoConfig(tiny) {
				let config;
				if (tiny) {
					config = {
						fps: this.currentFps,
						resolution: this.currentTinyResolution,
						mirror: this.mirror,
						minBitrate: this.tinyMinVideoKbps[this.currentTinyMinVideoKbpsIndex],
						maxBitrate: this.tinyMaxVideoKbps[this.currentTinyMaxVideoKbpsIndex],
					};
				} else {
					config = {
						fps: this.currentFps,
						resolution: this.currentResolution,
						mirror: this.mirror,
						minBitrate: this.minVideoKbps[this.currentMinVideoKbpsIndex],
						maxBitrate: this.maxVideoKbps[this.currentMaxVideoKbpsIndex],
					};
				}
				this.rtcEngine.setVideoConfig(config, this.isShowTiny);
			},

			updateRemoteUserSubscribedState(users, userId, type, enable) {
				let userIndex = users.findIndex(user => user.userId === userId);
				if (userIndex === -1) return;
				let user = users[userIndex];
				switch (type) {
					case RCRTCMediaType.Video:
						user.isSubscribedVideo = enable;
						break;
					case RCRTCMediaType.Audio:
						user.isSubscribedAudio = enable;
						break;
					case RCRTCMediaType.AudioVideo:
						user.isSubscribedAudio = enable;
						user.isSubscribedVideo = enable;
						break;
				}
				users.splice(userIndex, 1, user);
			},

			// 判断权限
			async requestAndroidPermission(permisionID) {
				let result = await permision.requestAndroidPermission(permisionID)
				let strStatus
				if (result === 1) {
					strStatus = "已获得授权"
					return result;
				}
				if (result === 0) {
					strStatus = "未获得授权"
				} else {
					strStatus = "被永久拒绝权限"
				}
				uni.showModal({
					content: permisionID + strStatus,
					showCancel: false
				});
				return result;
			},
			
			switchChange() {
				this.mhBeautyEnable = !this.mhBeautyEnable;
				if (!this.mhBeautyEnable) {
					this.reset();
				} else {
					this.setBeautyOption();
				}
			},
			//设置美颜
			setBeautyOption() {
				let option = {
					whitenessLevel: this.whiteVal,
					ruddyLevel: this.ruddyVal,
					smoothLevel: this.buffingVal,
					brightLevel: this.brightnessVal
				}
				if (this.mhBeautyEnable) { //开启
					console.log('设置美颜')
					RCBeautyEngine.setBeautyOptions(this.mhBeautyEnable, option);
				}
			},
			//切换滤镜
			switchBeautyFilter(id) {
				//切换滤镜打开美颜
				if (!this.mhBeautyEnable) {
					this.mhBeautyEnable = true;
				}
				let option = {
					whitenessLevel: this.whiteVal,
					ruddyLevel: this.ruddyVal,
					smoothLevel: this.buffingVal,
					brightLevel: this.brightnessVal
				}
				//打开滤镜
				this.currentBeautyFilter = id;
				this.mhBeautyEnable ? RCBeautyEngine.setBeautyOptions(this.mhBeautyEnable, option) : '';
				RCBeautyEngine.setBeautyFilter(this.currentBeautyFilter);
			},
			//美白
			whiteChange(e) {
				console.log('美白', e.detail.value);
				//打开美颜
				if (!this.mhBeautyEnable) {
					this.mhBeautyEnable = true;
				}
				this.whiteVal = e.detail.value;
				this.setBeautyOption();
			},
			//红润
			ruddyChange(e) {
				console.log('红润', e.detail.value);
				//打开美颜
				if (!this.mhBeautyEnable) {
					this.mhBeautyEnable = true;
				}
				this.ruddyVal = e.detail.value;
				this.setBeautyOption();
			},
			//磨皮
			buffingChange(e) {
				console.log('磨皮', e.detail.value);
				//打开美颜
				if (!this.mhBeautyEnable) {
					this.mhBeautyEnable = true;
				}
				this.buffingVal = e.detail.value;
				this.setBeautyOption();
			},
			//亮度
			brightnessChange(e) {
				console.log('亮度', e.detail.value);
				//打开美颜
				if (!this.mhBeautyEnable) {
					this.mhBeautyEnable = true;
				}
				this.brightnessVal = e.detail.value;
				this.setBeautyOption();
			},
			//重置
			reset() {
				RCBeautyEngine.resetBeauty();
				this.initBeautyOpton();
			},
			initBeautyOpton() {
				//初始化滤镜
				this.currentBeautyFilter = RCBeautyEngine.getCurrentBeautyFilter();
				//初始化美颜参数
				let beautyOption = RCBeautyEngine.getCurrentBeautyOptions();
				this.whiteVal = beautyOption.whitenessLevel;
				this.ruddyVal = beautyOption.ruddyLevel;
				this.buffingVal = beautyOption.smoothLevel;
				this.brightnessVal = beautyOption.brightLevel;
			},
			resetFUBeautyData() {
				if (getApp().globalData.fuBeautyRegisterCode === 1) {
					RCFUBeautyEngine.reset();
					RCFUBeautyEngine.setBeautyEnable(false);
					getApp().globalData.fuBeautyData.enable = false;
					getApp().globalData.fuBeautyData.skinBeautyValues = null;
					getApp().globalData.fuBeautyData.faceShapeValues = null;
					getApp().globalData.fuBeautyData.filterBeautyValues = null;
					getApp().globalData.fuBeautyData.currentSkinBlurType = 0;
				}
			},
			updateScreenOrientation() {
				// 安卓 和 iOS 同样的角度但含义不同，所以下面做了平台判断
				let orientationNumber = plus.navigator.getOrientation();
				console.log(orientationNumber);
				let orientation = 0;
				let fuOrientation = 0;
				switch(orientationNumber){
					case 0:
						orientation = RCRTCCameraCaptureOrientation.Portrait;
						fuOrientation = 0;
						break;
					case 90:
						{
							if (Platform === 'android') {
								orientation = RCRTCCameraCaptureOrientation.LandscapeRight;
								fuOrientation = 1;
							} else {
								orientation = RCRTCCameraCaptureOrientation.LandscapeLeft;
								fuOrientation = 3;
							}
						}
						break;
					case 180:
					{
						orientation = RCRTCCameraCaptureOrientation.PortraitUpsideDown;
						fuOrientation = 2;
					}
						break;
					case -90:
						{
							if (Platform === 'android') {
								orientation = RCRTCCameraCaptureOrientation.LandscapeLeft;
								fuOrientation = 3;
							} else {
								orientation = RCRTCCameraCaptureOrientation.LandscapeRight;
								fuOrientation = 1;
							}
						}
						break;
				}
				// 设置 rtc 摄像头采集方向
				this.rtcEngine.setCameraCaptureOrientation(orientation);
				// 设置相芯美颜显示方向
				RCFUBeautyEngine.setDisplayOrientation(fuOrientation);
			},
			
			/* callbacks */

			onErrorCallback({code, message}) {
				console.log(`onErrorCallback code:${code}, message:${message}`);
			},

			onRoomJoinedCallback(res) {
				console.log('host OnRoomJoined ', res);
				let {
					code,
					message
				} = res;
				uni.hideLoading();
				if (code != 0) {
					uni.showToast({
						icon: 'none',
						title: `Join Room Error: msg: ${message},code: ${code}`,
						duration: 2000,
						complete: () => {
							// 返回上一个页面
							setTimeout(() => {
								uni.navigateBack();
							}, 2000);
						}
					});
				} else {
					this.initialConfig();
				}
			},

			onRoomLeftCallback({ code, message }) {
				let str = code === 0 ? '成功' : `失败: ${code}-${message}`;
				uni.showToast({
					icon: 'none',
					title: `退出房间${str}`
				});
			},
			
			onKickedCallback({roomId, message}) {
				uni.showToast({
					icon: 'none',
					title: `因超时被踢出房间`
				});
				uni.navigateBack();
			},

			onEnableCameraCallback(res) {
				console.log('host OnEnableCamera ', res);
				uni.hideLoading();
				let {
					enable,
					code,
					message
				} = res;
				this.enableCamera = enable;
				this.setupLocalView();
			},

			onPublishedCallback(res) {
				uni.hideLoading();
				let { type, code, message } = res;
				console.log(res);
				if (code === 0) {
					this.changeLocalPulishState(type, true);
				} else {
					uni.showToast({
						icon: 'none',
						title: `发布资源失败：${message}`,
					});
				}
			},

			onUnpublishedCallback(res) {
				uni.hideLoading();
				let { type, code, message } = res;
				console.log(res);
				if (code === 0) {
					this.changeLocalPulishState(type, false);
				} else {
					uni.showToast({
						icon: 'none',
						title: `取消发布资源失败：${message}`,
					});
				}
			},

			onUserJoinedCallback(res) {
				console.log('host OnUserJoined ', res);
				let { userId, roomId } = res;
				// 添加用户
				let user = {
					userId,
					isPublishAudio: false,
					isPublishVideo: false,
				};
				this.remotePublishers.push(user);
				// 更新全局保存的用户
				let globalUsers = getApp().globalData.mettingPageData.users;
				let tempUsers = this.remotePublishers.map(user => {
					return {
						userId: user.userId
					}
				});
				getApp().globalData.mettingPageData.users = globalUsers.concat(tempUsers);
			},

			onUserLeftCallback(res) {
				console.log('host OnUserLeft ', res);
				let { userId, roomId } = res;
				// 删除用户
				this.remotePublishers = this.remotePublishers.filter(user => user.userId != userId);
				// 更新全局保存的用户
				let globalUsers = getApp().globalData.mettingPageData.users;
				let filterUsers = globalUsers.filter(user => user.userId != userId);
				getApp().globalData.mettingPageData.users = filterUsers;
			},

			onRemotePublishedCallback(res) {
				let { userId, roomId, type } = res;
				// 更改回调用户的 isPublishVideo 和 isPublishAudio 的布尔值
				let userIndex = this.remotePublishers.findIndex(user => user.userId === userId);
				if (userIndex === -1) return;
				let user = this.remotePublishers[userIndex];
				switch (type) {
					case RCRTCMediaType.Video:
						user.isPublishVideo = true;
						break;
					case RCRTCMediaType.Audio:
						user.isPublishAudio = true;
						break;
					case RCRTCMediaType.AudioVideo:
						user.isPublishAudio = true;
						user.isPublishVideo = true;
						break;
				}
				this.remotePublishers.splice(userIndex, 1, user);
			},

			onRemoteUnpublishedCallback(res) {
				let { userId, roomId, type } = res;
				let userIndex = this.remotePublishers.findIndex(user => user.userId === userId);
				if (userIndex === -1) return;
				let user = this.remotePublishers[userIndex];
				switch (type) {
					case RCRTCMediaType.Video:
						user.isPublishVideo = false;
						user.isSubscribedVideo = false;
						break;
					case RCRTCMediaType.Audio:
						user.isPublishAudio = false;
						user.isSubscribedAudio = false;
						break;
					case RCRTCMediaType.AudioVideo:
						user.isPublishVideo = false;
						user.isPublishAudio = false;
						user.isSubscribedVideo = false;
						user.isSubscribedAudio = false;
						break;
				}
				this.remotePublishers.splice(userIndex, 1, user);
			},

			onSubscribedCallback(res) {
				uni.hideLoading();
				let { userId, type, code, message } = res;
				this.updateRemoteUserSubscribedState(this.remotePublishers, userId, type, true);
			},

			onUnsubscribedCallback(res) {
				uni.hideLoading();
				let { userId, type, code, message } = res;
				this.updateRemoteUserSubscribedState(this.remotePublishers, userId, type, false);
			},

			onNetworkStatsCallback(res) {
				this.networkStats = res;
			},

			onLocalAudioStatsCallback(res) {
				this.localAudioStats = res;
			},

			onLocalVideoStatsCallback(res) {
				if (res.tiny) {
					this.localTinyVideoStats = res;
				} else {
					this.localVideoStats = res;
				}
			},

			onRemoteVideoStatsCallback(res) {
				let { userId, roomId, stats } = res;
				let userIndex = this.remotePublishers.findIndex(user => user.userId === userId);
				if (userIndex === -1) return;
				let user = this.remotePublishers[userIndex];
				user.videoStats = stats;
				this.remotePublishers.splice(userIndex, 1, user);
			},
		}
	}
</script>

<style scoped>
	.setting-view {
		display: flex;
		position: fixed;
		flex-direction: row;
		justify-content: flex-end;
		margin-bottom: 10rpx;
		padding: 10rpx;
		background-color: #007AFF;
		height: 80rpx;
		left: 0;
		right: 0;
	}

	.setting-button {
		margin-left: 20rpx;
		opacity: 1;
	}

	.setting-button-disable {
		opacity: 0.3;
	}

	.text {
		font-size: 27rpx;
	}

	.whiteColor {
		color: #FFFFFF
	}

	.radio {
		flex-direction: row;
		align-items: center;
	}

	.localVideoView {
		flex: 1;
		height: 400rpx;
	}

	.videoTopView {
		position: absolute;
		left: 10rpx;
		top: 10rpx;
		align-items: flex-start;
	}

	.rightControlArea {
		flex: 1;
		margin-left: 10rpx;
	}

	.dropdownButton {
		width: 140rpx;
		height: 50rpx;
	}

	.fitButton {
		margin-top: 10rpx;
	}

	.tinySetup {
		margin: 10rpx;
		border-width: 1rpx;
		border-color: #465CFF;
		justify-content: space-around;
		padding-top: 20rpx;
		padding-bottom: 20rpx;
	}

	.networkStats {
		padding: 20rpx;
	}

	.statsText {
		flex: 1;
		text-align: center;
	}

	.menu {
		position: fixed;
		background-color: #EEEEEE;
		top: 10rpx;
		right: 10rpx;
		padding: 20rpx;
	}

	.beauty {
		height: 500upx;
		position: fixed;
		bottom: 0;
		background: #000;
	}

	.beauty-btn {
		height: 100upx;
		padding-right: 20upx;
		flex-direction: row;
		justify-content: space-between;
	}

	.change-btn {
		padding-top: 20upx;
		flex-direction: row;
	}

	.switch-btn {
		border: 1upx;
		border-color: #fff;
		padding: 20upx;
		background: blue;
		color: #fff;
		margin-left: 20upx;
		margin-top: -10upx;
	}

	.ch-tit {
		margin-top: 8upx;
		color: #fff;
	}

	.ch-res {
		margin-top: -10upx;
		margin-left: 20upx;
		color: #fff;
		padding: 20upx;
		border-radius: 10upx;
		justify-content: center;
		align-items: center;
		background: #4e6ef2;
	}

	.close-btn {
		padding-top: 20upx;
	}

	.close-tit {
		color: #fff;
	}

	.beauty-view {
		flex: 1;
		background: #ccc;
	}

	.com-view {
		padding-top: 40upx;
		background: #ccc;
		padding-left: 30upx;
		padding-right: 30upx;

	}

	.beauty-tab {
		border-top: 1px;
		border-top-color: #000000;
		padding: 0 20upx;
		flex: 1;
		background: #fff;
		flex-direction: row;
		justify-content: space-between;
		padding-top: 40upx;
	}

	.filte-view {}

	.tab-item {
		width: 100upx;
		height: 100upx;
		border: 1px;
		border-color: #000000;
		justify-content: center;
		align-items: center;
	}

	.current {
		background: yellow;
	}

	.white-view {}
</style>
